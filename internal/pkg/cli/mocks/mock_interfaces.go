// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/cli/interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	encoding "encoding"
	archer "github.com/aws/amazon-ecs-cli-v2/internal/pkg/archer"
	cloudwatchlogs "github.com/aws/amazon-ecs-cli-v2/internal/pkg/aws/cloudwatchlogs"
	codepipeline "github.com/aws/amazon-ecs-cli-v2/internal/pkg/aws/codepipeline"
	ecr "github.com/aws/amazon-ecs-cli-v2/internal/pkg/aws/ecr"
	ecs "github.com/aws/amazon-ecs-cli-v2/internal/pkg/aws/ecs"
	deploy "github.com/aws/amazon-ecs-cli-v2/internal/pkg/deploy"
	describe "github.com/aws/amazon-ecs-cli-v2/internal/pkg/describe"
	command "github.com/aws/amazon-ecs-cli-v2/internal/pkg/term/command"
	workspace "github.com/aws/amazon-ecs-cli-v2/internal/pkg/workspace"
	session "github.com/aws/aws-sdk-go/aws/session"
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockactionCommand is a mock of actionCommand interface
type MockactionCommand struct {
	ctrl     *gomock.Controller
	recorder *MockactionCommandMockRecorder
}

// MockactionCommandMockRecorder is the mock recorder for MockactionCommand
type MockactionCommandMockRecorder struct {
	mock *MockactionCommand
}

// NewMockactionCommand creates a new mock instance
func NewMockactionCommand(ctrl *gomock.Controller) *MockactionCommand {
	mock := &MockactionCommand{ctrl: ctrl}
	mock.recorder = &MockactionCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockactionCommand) EXPECT() *MockactionCommandMockRecorder {
	return m.recorder
}

// Validate mocks base method
func (m *MockactionCommand) Validate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate
func (mr *MockactionCommandMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockactionCommand)(nil).Validate))
}

// Ask mocks base method
func (m *MockactionCommand) Ask() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ask")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ask indicates an expected call of Ask
func (mr *MockactionCommandMockRecorder) Ask() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ask", reflect.TypeOf((*MockactionCommand)(nil).Ask))
}

// Execute mocks base method
func (m *MockactionCommand) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute
func (mr *MockactionCommandMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockactionCommand)(nil).Execute))
}

// RecommendedActions mocks base method
func (m *MockactionCommand) RecommendedActions() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecommendedActions")
	ret0, _ := ret[0].([]string)
	return ret0
}

// RecommendedActions indicates an expected call of RecommendedActions
func (mr *MockactionCommandMockRecorder) RecommendedActions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecommendedActions", reflect.TypeOf((*MockactionCommand)(nil).RecommendedActions))
}

// MockprojectService is a mock of projectService interface
type MockprojectService struct {
	ctrl     *gomock.Controller
	recorder *MockprojectServiceMockRecorder
}

// MockprojectServiceMockRecorder is the mock recorder for MockprojectService
type MockprojectServiceMockRecorder struct {
	mock *MockprojectService
}

// NewMockprojectService creates a new mock instance
func NewMockprojectService(ctrl *gomock.Controller) *MockprojectService {
	mock := &MockprojectService{ctrl: ctrl}
	mock.recorder = &MockprojectServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockprojectService) EXPECT() *MockprojectServiceMockRecorder {
	return m.recorder
}

// ListProjects mocks base method
func (m *MockprojectService) ListProjects() ([]*archer.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjects")
	ret0, _ := ret[0].([]*archer.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjects indicates an expected call of ListProjects
func (mr *MockprojectServiceMockRecorder) ListProjects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjects", reflect.TypeOf((*MockprojectService)(nil).ListProjects))
}

// GetProject mocks base method
func (m *MockprojectService) GetProject(projectName string) (*archer.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProject", projectName)
	ret0, _ := ret[0].(*archer.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProject indicates an expected call of GetProject
func (mr *MockprojectServiceMockRecorder) GetProject(projectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockprojectService)(nil).GetProject), projectName)
}

// CreateProject mocks base method
func (m *MockprojectService) CreateProject(project *archer.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", project)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProject indicates an expected call of CreateProject
func (mr *MockprojectServiceMockRecorder) CreateProject(project interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockprojectService)(nil).CreateProject), project)
}

// DeleteProject mocks base method
func (m *MockprojectService) DeleteProject(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProject indicates an expected call of DeleteProject
func (mr *MockprojectServiceMockRecorder) DeleteProject(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockprojectService)(nil).DeleteProject), name)
}

// ListEnvironments mocks base method
func (m *MockprojectService) ListEnvironments(projectName string) ([]*archer.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironments", projectName)
	ret0, _ := ret[0].([]*archer.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironments indicates an expected call of ListEnvironments
func (mr *MockprojectServiceMockRecorder) ListEnvironments(projectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironments", reflect.TypeOf((*MockprojectService)(nil).ListEnvironments), projectName)
}

// GetEnvironment mocks base method
func (m *MockprojectService) GetEnvironment(projectName, environmentName string) (*archer.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironment", projectName, environmentName)
	ret0, _ := ret[0].(*archer.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironment indicates an expected call of GetEnvironment
func (mr *MockprojectServiceMockRecorder) GetEnvironment(projectName, environmentName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironment", reflect.TypeOf((*MockprojectService)(nil).GetEnvironment), projectName, environmentName)
}

// CreateEnvironment mocks base method
func (m *MockprojectService) CreateEnvironment(env *archer.Environment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvironment", env)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEnvironment indicates an expected call of CreateEnvironment
func (mr *MockprojectServiceMockRecorder) CreateEnvironment(env interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironment", reflect.TypeOf((*MockprojectService)(nil).CreateEnvironment), env)
}

// DeleteEnvironment mocks base method
func (m *MockprojectService) DeleteEnvironment(projectName, environmentName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironment", projectName, environmentName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEnvironment indicates an expected call of DeleteEnvironment
func (mr *MockprojectServiceMockRecorder) DeleteEnvironment(projectName, environmentName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironment", reflect.TypeOf((*MockprojectService)(nil).DeleteEnvironment), projectName, environmentName)
}

// ListApplications mocks base method
func (m *MockprojectService) ListApplications(projectName string) ([]*archer.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplications", projectName)
	ret0, _ := ret[0].([]*archer.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplications indicates an expected call of ListApplications
func (mr *MockprojectServiceMockRecorder) ListApplications(projectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplications", reflect.TypeOf((*MockprojectService)(nil).ListApplications), projectName)
}

// GetApplication mocks base method
func (m *MockprojectService) GetApplication(projectName, applicationName string) (*archer.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplication", projectName, applicationName)
	ret0, _ := ret[0].(*archer.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplication indicates an expected call of GetApplication
func (mr *MockprojectServiceMockRecorder) GetApplication(projectName, applicationName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplication", reflect.TypeOf((*MockprojectService)(nil).GetApplication), projectName, applicationName)
}

// CreateApplication mocks base method
func (m *MockprojectService) CreateApplication(app *archer.Application) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplication", app)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateApplication indicates an expected call of CreateApplication
func (mr *MockprojectServiceMockRecorder) CreateApplication(app interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplication", reflect.TypeOf((*MockprojectService)(nil).CreateApplication), app)
}

// DeleteApplication mocks base method
func (m *MockprojectService) DeleteApplication(projectName, appName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplication", projectName, appName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApplication indicates an expected call of DeleteApplication
func (mr *MockprojectServiceMockRecorder) DeleteApplication(projectName, appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplication", reflect.TypeOf((*MockprojectService)(nil).DeleteApplication), projectName, appName)
}

// MockecrService is a mock of ecrService interface
type MockecrService struct {
	ctrl     *gomock.Controller
	recorder *MockecrServiceMockRecorder
}

// MockecrServiceMockRecorder is the mock recorder for MockecrService
type MockecrServiceMockRecorder struct {
	mock *MockecrService
}

// NewMockecrService creates a new mock instance
func NewMockecrService(ctrl *gomock.Controller) *MockecrService {
	mock := &MockecrService{ctrl: ctrl}
	mock.recorder = &MockecrServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockecrService) EXPECT() *MockecrServiceMockRecorder {
	return m.recorder
}

// GetRepository mocks base method
func (m *MockecrService) GetRepository(name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepository", name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepository indicates an expected call of GetRepository
func (mr *MockecrServiceMockRecorder) GetRepository(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepository", reflect.TypeOf((*MockecrService)(nil).GetRepository), name)
}

// GetECRAuth mocks base method
func (m *MockecrService) GetECRAuth() (ecr.Auth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetECRAuth")
	ret0, _ := ret[0].(ecr.Auth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetECRAuth indicates an expected call of GetECRAuth
func (mr *MockecrServiceMockRecorder) GetECRAuth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetECRAuth", reflect.TypeOf((*MockecrService)(nil).GetECRAuth))
}

// MockcwlogService is a mock of cwlogService interface
type MockcwlogService struct {
	ctrl     *gomock.Controller
	recorder *MockcwlogServiceMockRecorder
}

// MockcwlogServiceMockRecorder is the mock recorder for MockcwlogService
type MockcwlogServiceMockRecorder struct {
	mock *MockcwlogService
}

// NewMockcwlogService creates a new mock instance
func NewMockcwlogService(ctrl *gomock.Controller) *MockcwlogService {
	mock := &MockcwlogService{ctrl: ctrl}
	mock.recorder = &MockcwlogServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockcwlogService) EXPECT() *MockcwlogServiceMockRecorder {
	return m.recorder
}

// TaskLogEvents mocks base method
func (m *MockcwlogService) TaskLogEvents(logGroupName string, streamLastEventTime map[string]int64, opts ...cloudwatchlogs.GetLogEventsOpts) (*cloudwatchlogs.LogEventsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{logGroupName, streamLastEventTime}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TaskLogEvents", varargs...)
	ret0, _ := ret[0].(*cloudwatchlogs.LogEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TaskLogEvents indicates an expected call of TaskLogEvents
func (mr *MockcwlogServiceMockRecorder) TaskLogEvents(logGroupName, streamLastEventTime interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{logGroupName, streamLastEventTime}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskLogEvents", reflect.TypeOf((*MockcwlogService)(nil).TaskLogEvents), varargs...)
}

// LogGroupExists mocks base method
func (m *MockcwlogService) LogGroupExists(logGroupName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogGroupExists", logGroupName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogGroupExists indicates an expected call of LogGroupExists
func (mr *MockcwlogServiceMockRecorder) LogGroupExists(logGroupName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogGroupExists", reflect.TypeOf((*MockcwlogService)(nil).LogGroupExists), logGroupName)
}

// Mocktemplater is a mock of templater interface
type Mocktemplater struct {
	ctrl     *gomock.Controller
	recorder *MocktemplaterMockRecorder
}

// MocktemplaterMockRecorder is the mock recorder for Mocktemplater
type MocktemplaterMockRecorder struct {
	mock *Mocktemplater
}

// NewMocktemplater creates a new mock instance
func NewMocktemplater(ctrl *gomock.Controller) *Mocktemplater {
	mock := &Mocktemplater{ctrl: ctrl}
	mock.recorder = &MocktemplaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mocktemplater) EXPECT() *MocktemplaterMockRecorder {
	return m.recorder
}

// Template mocks base method
func (m *Mocktemplater) Template() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Template")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Template indicates an expected call of Template
func (mr *MocktemplaterMockRecorder) Template() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Template", reflect.TypeOf((*Mocktemplater)(nil).Template))
}

// MockstackSerializer is a mock of stackSerializer interface
type MockstackSerializer struct {
	ctrl     *gomock.Controller
	recorder *MockstackSerializerMockRecorder
}

// MockstackSerializerMockRecorder is the mock recorder for MockstackSerializer
type MockstackSerializerMockRecorder struct {
	mock *MockstackSerializer
}

// NewMockstackSerializer creates a new mock instance
func NewMockstackSerializer(ctrl *gomock.Controller) *MockstackSerializer {
	mock := &MockstackSerializer{ctrl: ctrl}
	mock.recorder = &MockstackSerializerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockstackSerializer) EXPECT() *MockstackSerializerMockRecorder {
	return m.recorder
}

// Template mocks base method
func (m *MockstackSerializer) Template() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Template")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Template indicates an expected call of Template
func (mr *MockstackSerializerMockRecorder) Template() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Template", reflect.TypeOf((*MockstackSerializer)(nil).Template))
}

// SerializedParameters mocks base method
func (m *MockstackSerializer) SerializedParameters() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SerializedParameters")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SerializedParameters indicates an expected call of SerializedParameters
func (mr *MockstackSerializerMockRecorder) SerializedParameters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SerializedParameters", reflect.TypeOf((*MockstackSerializer)(nil).SerializedParameters))
}

// MockdockerService is a mock of dockerService interface
type MockdockerService struct {
	ctrl     *gomock.Controller
	recorder *MockdockerServiceMockRecorder
}

// MockdockerServiceMockRecorder is the mock recorder for MockdockerService
type MockdockerServiceMockRecorder struct {
	mock *MockdockerService
}

// NewMockdockerService creates a new mock instance
func NewMockdockerService(ctrl *gomock.Controller) *MockdockerService {
	mock := &MockdockerService{ctrl: ctrl}
	mock.recorder = &MockdockerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockdockerService) EXPECT() *MockdockerServiceMockRecorder {
	return m.recorder
}

// Build mocks base method
func (m *MockdockerService) Build(uri, tag, path, dir string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", uri, tag, path, dir)
	ret0, _ := ret[0].(error)
	return ret0
}

// Build indicates an expected call of Build
func (mr *MockdockerServiceMockRecorder) Build(uri, tag, path, dir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockdockerService)(nil).Build), uri, tag, path, dir)
}

// Login mocks base method
func (m *MockdockerService) Login(uri, username, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", uri, username, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login
func (mr *MockdockerServiceMockRecorder) Login(uri, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockdockerService)(nil).Login), uri, username, password)
}

// Push mocks base method
func (m *MockdockerService) Push(uri, tag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", uri, tag)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push
func (mr *MockdockerServiceMockRecorder) Push(uri, tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockdockerService)(nil).Push), uri, tag)
}

// Mockrunner is a mock of runner interface
type Mockrunner struct {
	ctrl     *gomock.Controller
	recorder *MockrunnerMockRecorder
}

// MockrunnerMockRecorder is the mock recorder for Mockrunner
type MockrunnerMockRecorder struct {
	mock *Mockrunner
}

// NewMockrunner creates a new mock instance
func NewMockrunner(ctrl *gomock.Controller) *Mockrunner {
	mock := &Mockrunner{ctrl: ctrl}
	mock.recorder = &MockrunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockrunner) EXPECT() *MockrunnerMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *Mockrunner) Run(name string, args []string, options ...command.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{name, args}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Run", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockrunnerMockRecorder) Run(name, args interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name, args}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*Mockrunner)(nil).Run), varargs...)
}

// MockdefaultSessionProvider is a mock of defaultSessionProvider interface
type MockdefaultSessionProvider struct {
	ctrl     *gomock.Controller
	recorder *MockdefaultSessionProviderMockRecorder
}

// MockdefaultSessionProviderMockRecorder is the mock recorder for MockdefaultSessionProvider
type MockdefaultSessionProviderMockRecorder struct {
	mock *MockdefaultSessionProvider
}

// NewMockdefaultSessionProvider creates a new mock instance
func NewMockdefaultSessionProvider(ctrl *gomock.Controller) *MockdefaultSessionProvider {
	mock := &MockdefaultSessionProvider{ctrl: ctrl}
	mock.recorder = &MockdefaultSessionProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockdefaultSessionProvider) EXPECT() *MockdefaultSessionProviderMockRecorder {
	return m.recorder
}

// Default mocks base method
func (m *MockdefaultSessionProvider) Default() (*session.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Default")
	ret0, _ := ret[0].(*session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Default indicates an expected call of Default
func (mr *MockdefaultSessionProviderMockRecorder) Default() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Default", reflect.TypeOf((*MockdefaultSessionProvider)(nil).Default))
}

// MockregionalSessionProvider is a mock of regionalSessionProvider interface
type MockregionalSessionProvider struct {
	ctrl     *gomock.Controller
	recorder *MockregionalSessionProviderMockRecorder
}

// MockregionalSessionProviderMockRecorder is the mock recorder for MockregionalSessionProvider
type MockregionalSessionProviderMockRecorder struct {
	mock *MockregionalSessionProvider
}

// NewMockregionalSessionProvider creates a new mock instance
func NewMockregionalSessionProvider(ctrl *gomock.Controller) *MockregionalSessionProvider {
	mock := &MockregionalSessionProvider{ctrl: ctrl}
	mock.recorder = &MockregionalSessionProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockregionalSessionProvider) EXPECT() *MockregionalSessionProviderMockRecorder {
	return m.recorder
}

// DefaultWithRegion mocks base method
func (m *MockregionalSessionProvider) DefaultWithRegion(region string) (*session.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultWithRegion", region)
	ret0, _ := ret[0].(*session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DefaultWithRegion indicates an expected call of DefaultWithRegion
func (mr *MockregionalSessionProviderMockRecorder) DefaultWithRegion(region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultWithRegion", reflect.TypeOf((*MockregionalSessionProvider)(nil).DefaultWithRegion), region)
}

// MocksessionFromRoleProvider is a mock of sessionFromRoleProvider interface
type MocksessionFromRoleProvider struct {
	ctrl     *gomock.Controller
	recorder *MocksessionFromRoleProviderMockRecorder
}

// MocksessionFromRoleProviderMockRecorder is the mock recorder for MocksessionFromRoleProvider
type MocksessionFromRoleProviderMockRecorder struct {
	mock *MocksessionFromRoleProvider
}

// NewMocksessionFromRoleProvider creates a new mock instance
func NewMocksessionFromRoleProvider(ctrl *gomock.Controller) *MocksessionFromRoleProvider {
	mock := &MocksessionFromRoleProvider{ctrl: ctrl}
	mock.recorder = &MocksessionFromRoleProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocksessionFromRoleProvider) EXPECT() *MocksessionFromRoleProviderMockRecorder {
	return m.recorder
}

// FromRole mocks base method
func (m *MocksessionFromRoleProvider) FromRole(roleARN, region string) (*session.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromRole", roleARN, region)
	ret0, _ := ret[0].(*session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FromRole indicates an expected call of FromRole
func (mr *MocksessionFromRoleProviderMockRecorder) FromRole(roleARN, region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromRole", reflect.TypeOf((*MocksessionFromRoleProvider)(nil).FromRole), roleARN, region)
}

// MockprofileNames is a mock of profileNames interface
type MockprofileNames struct {
	ctrl     *gomock.Controller
	recorder *MockprofileNamesMockRecorder
}

// MockprofileNamesMockRecorder is the mock recorder for MockprofileNames
type MockprofileNamesMockRecorder struct {
	mock *MockprofileNames
}

// NewMockprofileNames creates a new mock instance
func NewMockprofileNames(ctrl *gomock.Controller) *MockprofileNames {
	mock := &MockprofileNames{ctrl: ctrl}
	mock.recorder = &MockprofileNamesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockprofileNames) EXPECT() *MockprofileNamesMockRecorder {
	return m.recorder
}

// Names mocks base method
func (m *MockprofileNames) Names() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Names")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Names indicates an expected call of Names
func (mr *MockprofileNamesMockRecorder) Names() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Names", reflect.TypeOf((*MockprofileNames)(nil).Names))
}

// MocksessionProvider is a mock of sessionProvider interface
type MocksessionProvider struct {
	ctrl     *gomock.Controller
	recorder *MocksessionProviderMockRecorder
}

// MocksessionProviderMockRecorder is the mock recorder for MocksessionProvider
type MocksessionProviderMockRecorder struct {
	mock *MocksessionProvider
}

// NewMocksessionProvider creates a new mock instance
func NewMocksessionProvider(ctrl *gomock.Controller) *MocksessionProvider {
	mock := &MocksessionProvider{ctrl: ctrl}
	mock.recorder = &MocksessionProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocksessionProvider) EXPECT() *MocksessionProviderMockRecorder {
	return m.recorder
}

// Default mocks base method
func (m *MocksessionProvider) Default() (*session.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Default")
	ret0, _ := ret[0].(*session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Default indicates an expected call of Default
func (mr *MocksessionProviderMockRecorder) Default() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Default", reflect.TypeOf((*MocksessionProvider)(nil).Default))
}

// DefaultWithRegion mocks base method
func (m *MocksessionProvider) DefaultWithRegion(region string) (*session.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultWithRegion", region)
	ret0, _ := ret[0].(*session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DefaultWithRegion indicates an expected call of DefaultWithRegion
func (mr *MocksessionProviderMockRecorder) DefaultWithRegion(region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultWithRegion", reflect.TypeOf((*MocksessionProvider)(nil).DefaultWithRegion), region)
}

// FromRole mocks base method
func (m *MocksessionProvider) FromRole(roleARN, region string) (*session.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromRole", roleARN, region)
	ret0, _ := ret[0].(*session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FromRole indicates an expected call of FromRole
func (mr *MocksessionProviderMockRecorder) FromRole(roleARN, region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromRole", reflect.TypeOf((*MocksessionProvider)(nil).FromRole), roleARN, region)
}

// Mockdescriber is a mock of describer interface
type Mockdescriber struct {
	ctrl     *gomock.Controller
	recorder *MockdescriberMockRecorder
}

// MockdescriberMockRecorder is the mock recorder for Mockdescriber
type MockdescriberMockRecorder struct {
	mock *Mockdescriber
}

// NewMockdescriber creates a new mock instance
func NewMockdescriber(ctrl *gomock.Controller) *Mockdescriber {
	mock := &Mockdescriber{ctrl: ctrl}
	mock.recorder = &MockdescriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockdescriber) EXPECT() *MockdescriberMockRecorder {
	return m.recorder
}

// Describe mocks base method
func (m *Mockdescriber) Describe() (describe.HumanJSONStringer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Describe")
	ret0, _ := ret[0].(describe.HumanJSONStringer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Describe indicates an expected call of Describe
func (mr *MockdescriberMockRecorder) Describe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Describe", reflect.TypeOf((*Mockdescriber)(nil).Describe))
}

// MockstoreReader is a mock of storeReader interface
type MockstoreReader struct {
	ctrl     *gomock.Controller
	recorder *MockstoreReaderMockRecorder
}

// MockstoreReaderMockRecorder is the mock recorder for MockstoreReader
type MockstoreReaderMockRecorder struct {
	mock *MockstoreReader
}

// NewMockstoreReader creates a new mock instance
func NewMockstoreReader(ctrl *gomock.Controller) *MockstoreReader {
	mock := &MockstoreReader{ctrl: ctrl}
	mock.recorder = &MockstoreReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockstoreReader) EXPECT() *MockstoreReaderMockRecorder {
	return m.recorder
}

// ListProjects mocks base method
func (m *MockstoreReader) ListProjects() ([]*archer.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjects")
	ret0, _ := ret[0].([]*archer.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjects indicates an expected call of ListProjects
func (mr *MockstoreReaderMockRecorder) ListProjects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjects", reflect.TypeOf((*MockstoreReader)(nil).ListProjects))
}

// GetProject mocks base method
func (m *MockstoreReader) GetProject(projectName string) (*archer.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProject", projectName)
	ret0, _ := ret[0].(*archer.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProject indicates an expected call of GetProject
func (mr *MockstoreReaderMockRecorder) GetProject(projectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockstoreReader)(nil).GetProject), projectName)
}

// ListEnvironments mocks base method
func (m *MockstoreReader) ListEnvironments(projectName string) ([]*archer.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironments", projectName)
	ret0, _ := ret[0].([]*archer.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironments indicates an expected call of ListEnvironments
func (mr *MockstoreReaderMockRecorder) ListEnvironments(projectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironments", reflect.TypeOf((*MockstoreReader)(nil).ListEnvironments), projectName)
}

// GetEnvironment mocks base method
func (m *MockstoreReader) GetEnvironment(projectName, environmentName string) (*archer.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironment", projectName, environmentName)
	ret0, _ := ret[0].(*archer.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironment indicates an expected call of GetEnvironment
func (mr *MockstoreReaderMockRecorder) GetEnvironment(projectName, environmentName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironment", reflect.TypeOf((*MockstoreReader)(nil).GetEnvironment), projectName, environmentName)
}

// ListApplications mocks base method
func (m *MockstoreReader) ListApplications(projectName string) ([]*archer.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApplications", projectName)
	ret0, _ := ret[0].([]*archer.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListApplications indicates an expected call of ListApplications
func (mr *MockstoreReaderMockRecorder) ListApplications(projectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplications", reflect.TypeOf((*MockstoreReader)(nil).ListApplications), projectName)
}

// GetApplication mocks base method
func (m *MockstoreReader) GetApplication(projectName, applicationName string) (*archer.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplication", projectName, applicationName)
	ret0, _ := ret[0].(*archer.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplication indicates an expected call of GetApplication
func (mr *MockstoreReaderMockRecorder) GetApplication(projectName, applicationName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplication", reflect.TypeOf((*MockstoreReader)(nil).GetApplication), projectName, applicationName)
}

// MockworkspaceDeleter is a mock of workspaceDeleter interface
type MockworkspaceDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockworkspaceDeleterMockRecorder
}

// MockworkspaceDeleterMockRecorder is the mock recorder for MockworkspaceDeleter
type MockworkspaceDeleterMockRecorder struct {
	mock *MockworkspaceDeleter
}

// NewMockworkspaceDeleter creates a new mock instance
func NewMockworkspaceDeleter(ctrl *gomock.Controller) *MockworkspaceDeleter {
	mock := &MockworkspaceDeleter{ctrl: ctrl}
	mock.recorder = &MockworkspaceDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockworkspaceDeleter) EXPECT() *MockworkspaceDeleterMockRecorder {
	return m.recorder
}

// DeleteAll mocks base method
func (m *MockworkspaceDeleter) DeleteAll() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAll indicates an expected call of DeleteAll
func (mr *MockworkspaceDeleterMockRecorder) DeleteAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockworkspaceDeleter)(nil).DeleteAll))
}

// MockwsAppManifestReader is a mock of wsAppManifestReader interface
type MockwsAppManifestReader struct {
	ctrl     *gomock.Controller
	recorder *MockwsAppManifestReaderMockRecorder
}

// MockwsAppManifestReaderMockRecorder is the mock recorder for MockwsAppManifestReader
type MockwsAppManifestReaderMockRecorder struct {
	mock *MockwsAppManifestReader
}

// NewMockwsAppManifestReader creates a new mock instance
func NewMockwsAppManifestReader(ctrl *gomock.Controller) *MockwsAppManifestReader {
	mock := &MockwsAppManifestReader{ctrl: ctrl}
	mock.recorder = &MockwsAppManifestReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockwsAppManifestReader) EXPECT() *MockwsAppManifestReaderMockRecorder {
	return m.recorder
}

// ReadAppManifest mocks base method
func (m *MockwsAppManifestReader) ReadAppManifest(appName string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAppManifest", appName)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAppManifest indicates an expected call of ReadAppManifest
func (mr *MockwsAppManifestReaderMockRecorder) ReadAppManifest(appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAppManifest", reflect.TypeOf((*MockwsAppManifestReader)(nil).ReadAppManifest), appName)
}

// MockwsAppManifestWriter is a mock of wsAppManifestWriter interface
type MockwsAppManifestWriter struct {
	ctrl     *gomock.Controller
	recorder *MockwsAppManifestWriterMockRecorder
}

// MockwsAppManifestWriterMockRecorder is the mock recorder for MockwsAppManifestWriter
type MockwsAppManifestWriterMockRecorder struct {
	mock *MockwsAppManifestWriter
}

// NewMockwsAppManifestWriter creates a new mock instance
func NewMockwsAppManifestWriter(ctrl *gomock.Controller) *MockwsAppManifestWriter {
	mock := &MockwsAppManifestWriter{ctrl: ctrl}
	mock.recorder = &MockwsAppManifestWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockwsAppManifestWriter) EXPECT() *MockwsAppManifestWriterMockRecorder {
	return m.recorder
}

// WriteAppManifest mocks base method
func (m *MockwsAppManifestWriter) WriteAppManifest(marshaler encoding.BinaryMarshaler, appName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteAppManifest", marshaler, appName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteAppManifest indicates an expected call of WriteAppManifest
func (mr *MockwsAppManifestWriterMockRecorder) WriteAppManifest(marshaler, appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAppManifest", reflect.TypeOf((*MockwsAppManifestWriter)(nil).WriteAppManifest), marshaler, appName)
}

// MockwsPipelineManifestReader is a mock of wsPipelineManifestReader interface
type MockwsPipelineManifestReader struct {
	ctrl     *gomock.Controller
	recorder *MockwsPipelineManifestReaderMockRecorder
}

// MockwsPipelineManifestReaderMockRecorder is the mock recorder for MockwsPipelineManifestReader
type MockwsPipelineManifestReaderMockRecorder struct {
	mock *MockwsPipelineManifestReader
}

// NewMockwsPipelineManifestReader creates a new mock instance
func NewMockwsPipelineManifestReader(ctrl *gomock.Controller) *MockwsPipelineManifestReader {
	mock := &MockwsPipelineManifestReader{ctrl: ctrl}
	mock.recorder = &MockwsPipelineManifestReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockwsPipelineManifestReader) EXPECT() *MockwsPipelineManifestReaderMockRecorder {
	return m.recorder
}

// ReadPipelineManifest mocks base method
func (m *MockwsPipelineManifestReader) ReadPipelineManifest() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPipelineManifest")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadPipelineManifest indicates an expected call of ReadPipelineManifest
func (mr *MockwsPipelineManifestReaderMockRecorder) ReadPipelineManifest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPipelineManifest", reflect.TypeOf((*MockwsPipelineManifestReader)(nil).ReadPipelineManifest))
}

// MockwsPipelineWriter is a mock of wsPipelineWriter interface
type MockwsPipelineWriter struct {
	ctrl     *gomock.Controller
	recorder *MockwsPipelineWriterMockRecorder
}

// MockwsPipelineWriterMockRecorder is the mock recorder for MockwsPipelineWriter
type MockwsPipelineWriterMockRecorder struct {
	mock *MockwsPipelineWriter
}

// NewMockwsPipelineWriter creates a new mock instance
func NewMockwsPipelineWriter(ctrl *gomock.Controller) *MockwsPipelineWriter {
	mock := &MockwsPipelineWriter{ctrl: ctrl}
	mock.recorder = &MockwsPipelineWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockwsPipelineWriter) EXPECT() *MockwsPipelineWriterMockRecorder {
	return m.recorder
}

// WritePipelineBuildspec mocks base method
func (m *MockwsPipelineWriter) WritePipelineBuildspec(marshaler encoding.BinaryMarshaler) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WritePipelineBuildspec", marshaler)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WritePipelineBuildspec indicates an expected call of WritePipelineBuildspec
func (mr *MockwsPipelineWriterMockRecorder) WritePipelineBuildspec(marshaler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WritePipelineBuildspec", reflect.TypeOf((*MockwsPipelineWriter)(nil).WritePipelineBuildspec), marshaler)
}

// WritePipelineManifest mocks base method
func (m *MockwsPipelineWriter) WritePipelineManifest(marshaler encoding.BinaryMarshaler) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WritePipelineManifest", marshaler)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WritePipelineManifest indicates an expected call of WritePipelineManifest
func (mr *MockwsPipelineWriterMockRecorder) WritePipelineManifest(marshaler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WritePipelineManifest", reflect.TypeOf((*MockwsPipelineWriter)(nil).WritePipelineManifest), marshaler)
}

// MockwsAppDeleter is a mock of wsAppDeleter interface
type MockwsAppDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockwsAppDeleterMockRecorder
}

// MockwsAppDeleterMockRecorder is the mock recorder for MockwsAppDeleter
type MockwsAppDeleterMockRecorder struct {
	mock *MockwsAppDeleter
}

// NewMockwsAppDeleter creates a new mock instance
func NewMockwsAppDeleter(ctrl *gomock.Controller) *MockwsAppDeleter {
	mock := &MockwsAppDeleter{ctrl: ctrl}
	mock.recorder = &MockwsAppDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockwsAppDeleter) EXPECT() *MockwsAppDeleterMockRecorder {
	return m.recorder
}

// DeleteApp mocks base method
func (m *MockwsAppDeleter) DeleteApp(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApp", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApp indicates an expected call of DeleteApp
func (mr *MockwsAppDeleterMockRecorder) DeleteApp(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApp", reflect.TypeOf((*MockwsAppDeleter)(nil).DeleteApp), name)
}

// MockwsAppReader is a mock of wsAppReader interface
type MockwsAppReader struct {
	ctrl     *gomock.Controller
	recorder *MockwsAppReaderMockRecorder
}

// MockwsAppReaderMockRecorder is the mock recorder for MockwsAppReader
type MockwsAppReaderMockRecorder struct {
	mock *MockwsAppReader
}

// NewMockwsAppReader creates a new mock instance
func NewMockwsAppReader(ctrl *gomock.Controller) *MockwsAppReader {
	mock := &MockwsAppReader{ctrl: ctrl}
	mock.recorder = &MockwsAppReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockwsAppReader) EXPECT() *MockwsAppReaderMockRecorder {
	return m.recorder
}

// AppNames mocks base method
func (m *MockwsAppReader) AppNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppNames indicates an expected call of AppNames
func (mr *MockwsAppReaderMockRecorder) AppNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppNames", reflect.TypeOf((*MockwsAppReader)(nil).AppNames))
}

// ReadAppManifest mocks base method
func (m *MockwsAppReader) ReadAppManifest(appName string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAppManifest", appName)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAppManifest indicates an expected call of ReadAppManifest
func (mr *MockwsAppReaderMockRecorder) ReadAppManifest(appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAppManifest", reflect.TypeOf((*MockwsAppReader)(nil).ReadAppManifest), appName)
}

// MockwsPipelineDeleter is a mock of wsPipelineDeleter interface
type MockwsPipelineDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockwsPipelineDeleterMockRecorder
}

// MockwsPipelineDeleterMockRecorder is the mock recorder for MockwsPipelineDeleter
type MockwsPipelineDeleterMockRecorder struct {
	mock *MockwsPipelineDeleter
}

// NewMockwsPipelineDeleter creates a new mock instance
func NewMockwsPipelineDeleter(ctrl *gomock.Controller) *MockwsPipelineDeleter {
	mock := &MockwsPipelineDeleter{ctrl: ctrl}
	mock.recorder = &MockwsPipelineDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockwsPipelineDeleter) EXPECT() *MockwsPipelineDeleterMockRecorder {
	return m.recorder
}

// DeletePipelineManifest mocks base method
func (m *MockwsPipelineDeleter) DeletePipelineManifest() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePipelineManifest")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePipelineManifest indicates an expected call of DeletePipelineManifest
func (mr *MockwsPipelineDeleterMockRecorder) DeletePipelineManifest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePipelineManifest", reflect.TypeOf((*MockwsPipelineDeleter)(nil).DeletePipelineManifest))
}

// ReadPipelineManifest mocks base method
func (m *MockwsPipelineDeleter) ReadPipelineManifest() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPipelineManifest")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadPipelineManifest indicates an expected call of ReadPipelineManifest
func (mr *MockwsPipelineDeleterMockRecorder) ReadPipelineManifest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPipelineManifest", reflect.TypeOf((*MockwsPipelineDeleter)(nil).ReadPipelineManifest))
}

// MockwsPipelineReader is a mock of wsPipelineReader interface
type MockwsPipelineReader struct {
	ctrl     *gomock.Controller
	recorder *MockwsPipelineReaderMockRecorder
}

// MockwsPipelineReaderMockRecorder is the mock recorder for MockwsPipelineReader
type MockwsPipelineReaderMockRecorder struct {
	mock *MockwsPipelineReader
}

// NewMockwsPipelineReader creates a new mock instance
func NewMockwsPipelineReader(ctrl *gomock.Controller) *MockwsPipelineReader {
	mock := &MockwsPipelineReader{ctrl: ctrl}
	mock.recorder = &MockwsPipelineReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockwsPipelineReader) EXPECT() *MockwsPipelineReaderMockRecorder {
	return m.recorder
}

// AppNames mocks base method
func (m *MockwsPipelineReader) AppNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppNames indicates an expected call of AppNames
func (mr *MockwsPipelineReaderMockRecorder) AppNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppNames", reflect.TypeOf((*MockwsPipelineReader)(nil).AppNames))
}

// ReadPipelineManifest mocks base method
func (m *MockwsPipelineReader) ReadPipelineManifest() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPipelineManifest")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadPipelineManifest indicates an expected call of ReadPipelineManifest
func (mr *MockwsPipelineReaderMockRecorder) ReadPipelineManifest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPipelineManifest", reflect.TypeOf((*MockwsPipelineReader)(nil).ReadPipelineManifest))
}

// MockwsProjectManager is a mock of wsProjectManager interface
type MockwsProjectManager struct {
	ctrl     *gomock.Controller
	recorder *MockwsProjectManagerMockRecorder
}

// MockwsProjectManagerMockRecorder is the mock recorder for MockwsProjectManager
type MockwsProjectManagerMockRecorder struct {
	mock *MockwsProjectManager
}

// NewMockwsProjectManager creates a new mock instance
func NewMockwsProjectManager(ctrl *gomock.Controller) *MockwsProjectManager {
	mock := &MockwsProjectManager{ctrl: ctrl}
	mock.recorder = &MockwsProjectManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockwsProjectManager) EXPECT() *MockwsProjectManagerMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockwsProjectManager) Create(projectName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", projectName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockwsProjectManagerMockRecorder) Create(projectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockwsProjectManager)(nil).Create), projectName)
}

// Summary mocks base method
func (m *MockwsProjectManager) Summary() (*workspace.Summary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Summary")
	ret0, _ := ret[0].(*workspace.Summary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Summary indicates an expected call of Summary
func (mr *MockwsProjectManagerMockRecorder) Summary() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Summary", reflect.TypeOf((*MockwsProjectManager)(nil).Summary))
}

// MockartifactUploader is a mock of artifactUploader interface
type MockartifactUploader struct {
	ctrl     *gomock.Controller
	recorder *MockartifactUploaderMockRecorder
}

// MockartifactUploaderMockRecorder is the mock recorder for MockartifactUploader
type MockartifactUploaderMockRecorder struct {
	mock *MockartifactUploader
}

// NewMockartifactUploader creates a new mock instance
func NewMockartifactUploader(ctrl *gomock.Controller) *MockartifactUploader {
	mock := &MockartifactUploader{ctrl: ctrl}
	mock.recorder = &MockartifactUploaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockartifactUploader) EXPECT() *MockartifactUploaderMockRecorder {
	return m.recorder
}

// PutArtifact mocks base method
func (m *MockartifactUploader) PutArtifact(bucket, fileName string, data io.Reader) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutArtifact", bucket, fileName, data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutArtifact indicates an expected call of PutArtifact
func (mr *MockartifactUploaderMockRecorder) PutArtifact(bucket, fileName, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutArtifact", reflect.TypeOf((*MockartifactUploader)(nil).PutArtifact), bucket, fileName, data)
}

// Mockport is a mock of port interface
type Mockport struct {
	ctrl     *gomock.Controller
	recorder *MockportMockRecorder
}

// MockportMockRecorder is the mock recorder for Mockport
type MockportMockRecorder struct {
	mock *Mockport
}

// NewMockport creates a new mock instance
func NewMockport(ctrl *gomock.Controller) *Mockport {
	mock := &Mockport{ctrl: ctrl}
	mock.recorder = &MockportMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockport) EXPECT() *MockportMockRecorder {
	return m.recorder
}

// Set mocks base method
func (m *Mockport) Set(number int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", number)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockportMockRecorder) Set(number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*Mockport)(nil).Set), number)
}

// MockbucketEmptier is a mock of bucketEmptier interface
type MockbucketEmptier struct {
	ctrl     *gomock.Controller
	recorder *MockbucketEmptierMockRecorder
}

// MockbucketEmptierMockRecorder is the mock recorder for MockbucketEmptier
type MockbucketEmptierMockRecorder struct {
	mock *MockbucketEmptier
}

// NewMockbucketEmptier creates a new mock instance
func NewMockbucketEmptier(ctrl *gomock.Controller) *MockbucketEmptier {
	mock := &MockbucketEmptier{ctrl: ctrl}
	mock.recorder = &MockbucketEmptierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockbucketEmptier) EXPECT() *MockbucketEmptierMockRecorder {
	return m.recorder
}

// EmptyBucket mocks base method
func (m *MockbucketEmptier) EmptyBucket(bucket string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmptyBucket", bucket)
	ret0, _ := ret[0].(error)
	return ret0
}

// EmptyBucket indicates an expected call of EmptyBucket
func (mr *MockbucketEmptierMockRecorder) EmptyBucket(bucket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmptyBucket", reflect.TypeOf((*MockbucketEmptier)(nil).EmptyBucket), bucket)
}

// MockenvironmentDeployer is a mock of environmentDeployer interface
type MockenvironmentDeployer struct {
	ctrl     *gomock.Controller
	recorder *MockenvironmentDeployerMockRecorder
}

// MockenvironmentDeployerMockRecorder is the mock recorder for MockenvironmentDeployer
type MockenvironmentDeployerMockRecorder struct {
	mock *MockenvironmentDeployer
}

// NewMockenvironmentDeployer creates a new mock instance
func NewMockenvironmentDeployer(ctrl *gomock.Controller) *MockenvironmentDeployer {
	mock := &MockenvironmentDeployer{ctrl: ctrl}
	mock.recorder = &MockenvironmentDeployerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockenvironmentDeployer) EXPECT() *MockenvironmentDeployerMockRecorder {
	return m.recorder
}

// DeployEnvironment mocks base method
func (m *MockenvironmentDeployer) DeployEnvironment(env *deploy.CreateEnvironmentInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployEnvironment", env)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeployEnvironment indicates an expected call of DeployEnvironment
func (mr *MockenvironmentDeployerMockRecorder) DeployEnvironment(env interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployEnvironment", reflect.TypeOf((*MockenvironmentDeployer)(nil).DeployEnvironment), env)
}

// StreamEnvironmentCreation mocks base method
func (m *MockenvironmentDeployer) StreamEnvironmentCreation(env *deploy.CreateEnvironmentInput) (<-chan []deploy.ResourceEvent, <-chan deploy.CreateEnvironmentResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamEnvironmentCreation", env)
	ret0, _ := ret[0].(<-chan []deploy.ResourceEvent)
	ret1, _ := ret[1].(<-chan deploy.CreateEnvironmentResponse)
	return ret0, ret1
}

// StreamEnvironmentCreation indicates an expected call of StreamEnvironmentCreation
func (mr *MockenvironmentDeployerMockRecorder) StreamEnvironmentCreation(env interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamEnvironmentCreation", reflect.TypeOf((*MockenvironmentDeployer)(nil).StreamEnvironmentCreation), env)
}

// DeleteEnvironment mocks base method
func (m *MockenvironmentDeployer) DeleteEnvironment(projName, envName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironment", projName, envName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEnvironment indicates an expected call of DeleteEnvironment
func (mr *MockenvironmentDeployerMockRecorder) DeleteEnvironment(projName, envName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironment", reflect.TypeOf((*MockenvironmentDeployer)(nil).DeleteEnvironment), projName, envName)
}

// GetEnvironment mocks base method
func (m *MockenvironmentDeployer) GetEnvironment(projectName, envName string) (*archer.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironment", projectName, envName)
	ret0, _ := ret[0].(*archer.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironment indicates an expected call of GetEnvironment
func (mr *MockenvironmentDeployerMockRecorder) GetEnvironment(projectName, envName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironment", reflect.TypeOf((*MockenvironmentDeployer)(nil).GetEnvironment), projectName, envName)
}

// MockappDeployer is a mock of appDeployer interface
type MockappDeployer struct {
	ctrl     *gomock.Controller
	recorder *MockappDeployerMockRecorder
}

// MockappDeployerMockRecorder is the mock recorder for MockappDeployer
type MockappDeployerMockRecorder struct {
	mock *MockappDeployer
}

// NewMockappDeployer creates a new mock instance
func NewMockappDeployer(ctrl *gomock.Controller) *MockappDeployer {
	mock := &MockappDeployer{ctrl: ctrl}
	mock.recorder = &MockappDeployerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockappDeployer) EXPECT() *MockappDeployerMockRecorder {
	return m.recorder
}

// DeleteApp mocks base method
func (m *MockappDeployer) DeleteApp(in deploy.DeleteAppInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApp", in)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApp indicates an expected call of DeleteApp
func (mr *MockappDeployerMockRecorder) DeleteApp(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApp", reflect.TypeOf((*MockappDeployer)(nil).DeleteApp), in)
}

// MockappRemover is a mock of appRemover interface
type MockappRemover struct {
	ctrl     *gomock.Controller
	recorder *MockappRemoverMockRecorder
}

// MockappRemoverMockRecorder is the mock recorder for MockappRemover
type MockappRemoverMockRecorder struct {
	mock *MockappRemover
}

// NewMockappRemover creates a new mock instance
func NewMockappRemover(ctrl *gomock.Controller) *MockappRemover {
	mock := &MockappRemover{ctrl: ctrl}
	mock.recorder = &MockappRemoverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockappRemover) EXPECT() *MockappRemoverMockRecorder {
	return m.recorder
}

// RemoveAppFromProject mocks base method
func (m *MockappRemover) RemoveAppFromProject(project *archer.Project, appName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAppFromProject", project, appName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAppFromProject indicates an expected call of RemoveAppFromProject
func (mr *MockappRemoverMockRecorder) RemoveAppFromProject(project, appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAppFromProject", reflect.TypeOf((*MockappRemover)(nil).RemoveAppFromProject), project, appName)
}

// MockimageRemover is a mock of imageRemover interface
type MockimageRemover struct {
	ctrl     *gomock.Controller
	recorder *MockimageRemoverMockRecorder
}

// MockimageRemoverMockRecorder is the mock recorder for MockimageRemover
type MockimageRemoverMockRecorder struct {
	mock *MockimageRemover
}

// NewMockimageRemover creates a new mock instance
func NewMockimageRemover(ctrl *gomock.Controller) *MockimageRemover {
	mock := &MockimageRemover{ctrl: ctrl}
	mock.recorder = &MockimageRemoverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockimageRemover) EXPECT() *MockimageRemoverMockRecorder {
	return m.recorder
}

// ClearRepository mocks base method
func (m *MockimageRemover) ClearRepository(repoName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearRepository", repoName)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearRepository indicates an expected call of ClearRepository
func (mr *MockimageRemoverMockRecorder) ClearRepository(repoName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearRepository", reflect.TypeOf((*MockimageRemover)(nil).ClearRepository), repoName)
}

// MockpipelineDeployer is a mock of pipelineDeployer interface
type MockpipelineDeployer struct {
	ctrl     *gomock.Controller
	recorder *MockpipelineDeployerMockRecorder
}

// MockpipelineDeployerMockRecorder is the mock recorder for MockpipelineDeployer
type MockpipelineDeployerMockRecorder struct {
	mock *MockpipelineDeployer
}

// NewMockpipelineDeployer creates a new mock instance
func NewMockpipelineDeployer(ctrl *gomock.Controller) *MockpipelineDeployer {
	mock := &MockpipelineDeployer{ctrl: ctrl}
	mock.recorder = &MockpipelineDeployerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockpipelineDeployer) EXPECT() *MockpipelineDeployerMockRecorder {
	return m.recorder
}

// CreatePipeline mocks base method
func (m *MockpipelineDeployer) CreatePipeline(env *deploy.CreatePipelineInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePipeline", env)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePipeline indicates an expected call of CreatePipeline
func (mr *MockpipelineDeployerMockRecorder) CreatePipeline(env interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePipeline", reflect.TypeOf((*MockpipelineDeployer)(nil).CreatePipeline), env)
}

// UpdatePipeline mocks base method
func (m *MockpipelineDeployer) UpdatePipeline(env *deploy.CreatePipelineInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePipeline", env)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePipeline indicates an expected call of UpdatePipeline
func (mr *MockpipelineDeployerMockRecorder) UpdatePipeline(env interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePipeline", reflect.TypeOf((*MockpipelineDeployer)(nil).UpdatePipeline), env)
}

// PipelineExists mocks base method
func (m *MockpipelineDeployer) PipelineExists(env *deploy.CreatePipelineInput) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PipelineExists", env)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelineExists indicates an expected call of PipelineExists
func (mr *MockpipelineDeployerMockRecorder) PipelineExists(env interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineExists", reflect.TypeOf((*MockpipelineDeployer)(nil).PipelineExists), env)
}

// DeletePipeline mocks base method
func (m *MockpipelineDeployer) DeletePipeline(pipelineName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePipeline", pipelineName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePipeline indicates an expected call of DeletePipeline
func (mr *MockpipelineDeployerMockRecorder) DeletePipeline(pipelineName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePipeline", reflect.TypeOf((*MockpipelineDeployer)(nil).DeletePipeline), pipelineName)
}

// AddPipelineResourcesToProject mocks base method
func (m *MockpipelineDeployer) AddPipelineResourcesToProject(project *archer.Project, region string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPipelineResourcesToProject", project, region)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPipelineResourcesToProject indicates an expected call of AddPipelineResourcesToProject
func (mr *MockpipelineDeployerMockRecorder) AddPipelineResourcesToProject(project, region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPipelineResourcesToProject", reflect.TypeOf((*MockpipelineDeployer)(nil).AddPipelineResourcesToProject), project, region)
}

// GetProjectResourcesByRegion mocks base method
func (m *MockpipelineDeployer) GetProjectResourcesByRegion(project *archer.Project, region string) (*archer.ProjectRegionalResources, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectResourcesByRegion", project, region)
	ret0, _ := ret[0].(*archer.ProjectRegionalResources)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectResourcesByRegion indicates an expected call of GetProjectResourcesByRegion
func (mr *MockpipelineDeployerMockRecorder) GetProjectResourcesByRegion(project, region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectResourcesByRegion", reflect.TypeOf((*MockpipelineDeployer)(nil).GetProjectResourcesByRegion), project, region)
}

// GetRegionalProjectResources mocks base method
func (m *MockpipelineDeployer) GetRegionalProjectResources(project *archer.Project) ([]*archer.ProjectRegionalResources, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegionalProjectResources", project)
	ret0, _ := ret[0].([]*archer.ProjectRegionalResources)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegionalProjectResources indicates an expected call of GetRegionalProjectResources
func (mr *MockpipelineDeployerMockRecorder) GetRegionalProjectResources(project interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegionalProjectResources", reflect.TypeOf((*MockpipelineDeployer)(nil).GetRegionalProjectResources), project)
}

// MockprojectDeployer is a mock of projectDeployer interface
type MockprojectDeployer struct {
	ctrl     *gomock.Controller
	recorder *MockprojectDeployerMockRecorder
}

// MockprojectDeployerMockRecorder is the mock recorder for MockprojectDeployer
type MockprojectDeployerMockRecorder struct {
	mock *MockprojectDeployer
}

// NewMockprojectDeployer creates a new mock instance
func NewMockprojectDeployer(ctrl *gomock.Controller) *MockprojectDeployer {
	mock := &MockprojectDeployer{ctrl: ctrl}
	mock.recorder = &MockprojectDeployerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockprojectDeployer) EXPECT() *MockprojectDeployerMockRecorder {
	return m.recorder
}

// DeployProject mocks base method
func (m *MockprojectDeployer) DeployProject(in *deploy.CreateProjectInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployProject", in)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeployProject indicates an expected call of DeployProject
func (mr *MockprojectDeployerMockRecorder) DeployProject(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployProject", reflect.TypeOf((*MockprojectDeployer)(nil).DeployProject), in)
}

// AddAppToProject mocks base method
func (m *MockprojectDeployer) AddAppToProject(project *archer.Project, appName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAppToProject", project, appName)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAppToProject indicates an expected call of AddAppToProject
func (mr *MockprojectDeployerMockRecorder) AddAppToProject(project, appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAppToProject", reflect.TypeOf((*MockprojectDeployer)(nil).AddAppToProject), project, appName)
}

// AddEnvToProject mocks base method
func (m *MockprojectDeployer) AddEnvToProject(project *archer.Project, env *archer.Environment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEnvToProject", project, env)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEnvToProject indicates an expected call of AddEnvToProject
func (mr *MockprojectDeployerMockRecorder) AddEnvToProject(project, env interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEnvToProject", reflect.TypeOf((*MockprojectDeployer)(nil).AddEnvToProject), project, env)
}

// DelegateDNSPermissions mocks base method
func (m *MockprojectDeployer) DelegateDNSPermissions(project *archer.Project, accountID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelegateDNSPermissions", project, accountID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelegateDNSPermissions indicates an expected call of DelegateDNSPermissions
func (mr *MockprojectDeployerMockRecorder) DelegateDNSPermissions(project, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelegateDNSPermissions", reflect.TypeOf((*MockprojectDeployer)(nil).DelegateDNSPermissions), project, accountID)
}

// DeleteProject mocks base method
func (m *MockprojectDeployer) DeleteProject(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProject indicates an expected call of DeleteProject
func (mr *MockprojectDeployerMockRecorder) DeleteProject(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockprojectDeployer)(nil).DeleteProject), name)
}

// MockprojectResourcesGetter is a mock of projectResourcesGetter interface
type MockprojectResourcesGetter struct {
	ctrl     *gomock.Controller
	recorder *MockprojectResourcesGetterMockRecorder
}

// MockprojectResourcesGetterMockRecorder is the mock recorder for MockprojectResourcesGetter
type MockprojectResourcesGetterMockRecorder struct {
	mock *MockprojectResourcesGetter
}

// NewMockprojectResourcesGetter creates a new mock instance
func NewMockprojectResourcesGetter(ctrl *gomock.Controller) *MockprojectResourcesGetter {
	mock := &MockprojectResourcesGetter{ctrl: ctrl}
	mock.recorder = &MockprojectResourcesGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockprojectResourcesGetter) EXPECT() *MockprojectResourcesGetterMockRecorder {
	return m.recorder
}

// GetProjectResourcesByRegion mocks base method
func (m *MockprojectResourcesGetter) GetProjectResourcesByRegion(project *archer.Project, region string) (*archer.ProjectRegionalResources, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectResourcesByRegion", project, region)
	ret0, _ := ret[0].(*archer.ProjectRegionalResources)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectResourcesByRegion indicates an expected call of GetProjectResourcesByRegion
func (mr *MockprojectResourcesGetterMockRecorder) GetProjectResourcesByRegion(project, region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectResourcesByRegion", reflect.TypeOf((*MockprojectResourcesGetter)(nil).GetProjectResourcesByRegion), project, region)
}

// GetRegionalProjectResources mocks base method
func (m *MockprojectResourcesGetter) GetRegionalProjectResources(project *archer.Project) ([]*archer.ProjectRegionalResources, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegionalProjectResources", project)
	ret0, _ := ret[0].([]*archer.ProjectRegionalResources)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegionalProjectResources indicates an expected call of GetRegionalProjectResources
func (mr *MockprojectResourcesGetterMockRecorder) GetRegionalProjectResources(project interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegionalProjectResources", reflect.TypeOf((*MockprojectResourcesGetter)(nil).GetRegionalProjectResources), project)
}

// Mockdeployer is a mock of deployer interface
type Mockdeployer struct {
	ctrl     *gomock.Controller
	recorder *MockdeployerMockRecorder
}

// MockdeployerMockRecorder is the mock recorder for Mockdeployer
type MockdeployerMockRecorder struct {
	mock *Mockdeployer
}

// NewMockdeployer creates a new mock instance
func NewMockdeployer(ctrl *gomock.Controller) *Mockdeployer {
	mock := &Mockdeployer{ctrl: ctrl}
	mock.recorder = &MockdeployerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockdeployer) EXPECT() *MockdeployerMockRecorder {
	return m.recorder
}

// DeployEnvironment mocks base method
func (m *Mockdeployer) DeployEnvironment(env *deploy.CreateEnvironmentInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployEnvironment", env)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeployEnvironment indicates an expected call of DeployEnvironment
func (mr *MockdeployerMockRecorder) DeployEnvironment(env interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployEnvironment", reflect.TypeOf((*Mockdeployer)(nil).DeployEnvironment), env)
}

// StreamEnvironmentCreation mocks base method
func (m *Mockdeployer) StreamEnvironmentCreation(env *deploy.CreateEnvironmentInput) (<-chan []deploy.ResourceEvent, <-chan deploy.CreateEnvironmentResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamEnvironmentCreation", env)
	ret0, _ := ret[0].(<-chan []deploy.ResourceEvent)
	ret1, _ := ret[1].(<-chan deploy.CreateEnvironmentResponse)
	return ret0, ret1
}

// StreamEnvironmentCreation indicates an expected call of StreamEnvironmentCreation
func (mr *MockdeployerMockRecorder) StreamEnvironmentCreation(env interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamEnvironmentCreation", reflect.TypeOf((*Mockdeployer)(nil).StreamEnvironmentCreation), env)
}

// DeleteEnvironment mocks base method
func (m *Mockdeployer) DeleteEnvironment(projName, envName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironment", projName, envName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEnvironment indicates an expected call of DeleteEnvironment
func (mr *MockdeployerMockRecorder) DeleteEnvironment(projName, envName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironment", reflect.TypeOf((*Mockdeployer)(nil).DeleteEnvironment), projName, envName)
}

// GetEnvironment mocks base method
func (m *Mockdeployer) GetEnvironment(projectName, envName string) (*archer.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironment", projectName, envName)
	ret0, _ := ret[0].(*archer.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironment indicates an expected call of GetEnvironment
func (mr *MockdeployerMockRecorder) GetEnvironment(projectName, envName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironment", reflect.TypeOf((*Mockdeployer)(nil).GetEnvironment), projectName, envName)
}

// DeployProject mocks base method
func (m *Mockdeployer) DeployProject(in *deploy.CreateProjectInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployProject", in)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeployProject indicates an expected call of DeployProject
func (mr *MockdeployerMockRecorder) DeployProject(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployProject", reflect.TypeOf((*Mockdeployer)(nil).DeployProject), in)
}

// AddAppToProject mocks base method
func (m *Mockdeployer) AddAppToProject(project *archer.Project, appName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAppToProject", project, appName)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAppToProject indicates an expected call of AddAppToProject
func (mr *MockdeployerMockRecorder) AddAppToProject(project, appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAppToProject", reflect.TypeOf((*Mockdeployer)(nil).AddAppToProject), project, appName)
}

// AddEnvToProject mocks base method
func (m *Mockdeployer) AddEnvToProject(project *archer.Project, env *archer.Environment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEnvToProject", project, env)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEnvToProject indicates an expected call of AddEnvToProject
func (mr *MockdeployerMockRecorder) AddEnvToProject(project, env interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEnvToProject", reflect.TypeOf((*Mockdeployer)(nil).AddEnvToProject), project, env)
}

// DelegateDNSPermissions mocks base method
func (m *Mockdeployer) DelegateDNSPermissions(project *archer.Project, accountID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelegateDNSPermissions", project, accountID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelegateDNSPermissions indicates an expected call of DelegateDNSPermissions
func (mr *MockdeployerMockRecorder) DelegateDNSPermissions(project, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelegateDNSPermissions", reflect.TypeOf((*Mockdeployer)(nil).DelegateDNSPermissions), project, accountID)
}

// DeleteProject mocks base method
func (m *Mockdeployer) DeleteProject(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProject indicates an expected call of DeleteProject
func (mr *MockdeployerMockRecorder) DeleteProject(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*Mockdeployer)(nil).DeleteProject), name)
}

// CreatePipeline mocks base method
func (m *Mockdeployer) CreatePipeline(env *deploy.CreatePipelineInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePipeline", env)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePipeline indicates an expected call of CreatePipeline
func (mr *MockdeployerMockRecorder) CreatePipeline(env interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePipeline", reflect.TypeOf((*Mockdeployer)(nil).CreatePipeline), env)
}

// UpdatePipeline mocks base method
func (m *Mockdeployer) UpdatePipeline(env *deploy.CreatePipelineInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePipeline", env)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePipeline indicates an expected call of UpdatePipeline
func (mr *MockdeployerMockRecorder) UpdatePipeline(env interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePipeline", reflect.TypeOf((*Mockdeployer)(nil).UpdatePipeline), env)
}

// PipelineExists mocks base method
func (m *Mockdeployer) PipelineExists(env *deploy.CreatePipelineInput) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PipelineExists", env)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PipelineExists indicates an expected call of PipelineExists
func (mr *MockdeployerMockRecorder) PipelineExists(env interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipelineExists", reflect.TypeOf((*Mockdeployer)(nil).PipelineExists), env)
}

// DeletePipeline mocks base method
func (m *Mockdeployer) DeletePipeline(pipelineName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePipeline", pipelineName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePipeline indicates an expected call of DeletePipeline
func (mr *MockdeployerMockRecorder) DeletePipeline(pipelineName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePipeline", reflect.TypeOf((*Mockdeployer)(nil).DeletePipeline), pipelineName)
}

// AddPipelineResourcesToProject mocks base method
func (m *Mockdeployer) AddPipelineResourcesToProject(project *archer.Project, region string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPipelineResourcesToProject", project, region)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPipelineResourcesToProject indicates an expected call of AddPipelineResourcesToProject
func (mr *MockdeployerMockRecorder) AddPipelineResourcesToProject(project, region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPipelineResourcesToProject", reflect.TypeOf((*Mockdeployer)(nil).AddPipelineResourcesToProject), project, region)
}

// GetProjectResourcesByRegion mocks base method
func (m *Mockdeployer) GetProjectResourcesByRegion(project *archer.Project, region string) (*archer.ProjectRegionalResources, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectResourcesByRegion", project, region)
	ret0, _ := ret[0].(*archer.ProjectRegionalResources)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectResourcesByRegion indicates an expected call of GetProjectResourcesByRegion
func (mr *MockdeployerMockRecorder) GetProjectResourcesByRegion(project, region interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectResourcesByRegion", reflect.TypeOf((*Mockdeployer)(nil).GetProjectResourcesByRegion), project, region)
}

// GetRegionalProjectResources mocks base method
func (m *Mockdeployer) GetRegionalProjectResources(project *archer.Project) ([]*archer.ProjectRegionalResources, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegionalProjectResources", project)
	ret0, _ := ret[0].([]*archer.ProjectRegionalResources)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegionalProjectResources indicates an expected call of GetRegionalProjectResources
func (mr *MockdeployerMockRecorder) GetRegionalProjectResources(project interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegionalProjectResources", reflect.TypeOf((*Mockdeployer)(nil).GetRegionalProjectResources), project)
}

// MockdomainValidator is a mock of domainValidator interface
type MockdomainValidator struct {
	ctrl     *gomock.Controller
	recorder *MockdomainValidatorMockRecorder
}

// MockdomainValidatorMockRecorder is the mock recorder for MockdomainValidator
type MockdomainValidatorMockRecorder struct {
	mock *MockdomainValidator
}

// NewMockdomainValidator creates a new mock instance
func NewMockdomainValidator(ctrl *gomock.Controller) *MockdomainValidator {
	mock := &MockdomainValidator{ctrl: ctrl}
	mock.recorder = &MockdomainValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockdomainValidator) EXPECT() *MockdomainValidatorMockRecorder {
	return m.recorder
}

// DomainExists mocks base method
func (m *MockdomainValidator) DomainExists(domainName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DomainExists", domainName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DomainExists indicates an expected call of DomainExists
func (mr *MockdomainValidatorMockRecorder) DomainExists(domainName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DomainExists", reflect.TypeOf((*MockdomainValidator)(nil).DomainExists), domainName)
}

// MockdockerfileParser is a mock of dockerfileParser interface
type MockdockerfileParser struct {
	ctrl     *gomock.Controller
	recorder *MockdockerfileParserMockRecorder
}

// MockdockerfileParserMockRecorder is the mock recorder for MockdockerfileParser
type MockdockerfileParserMockRecorder struct {
	mock *MockdockerfileParser
}

// NewMockdockerfileParser creates a new mock instance
func NewMockdockerfileParser(ctrl *gomock.Controller) *MockdockerfileParser {
	mock := &MockdockerfileParser{ctrl: ctrl}
	mock.recorder = &MockdockerfileParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockdockerfileParser) EXPECT() *MockdockerfileParserMockRecorder {
	return m.recorder
}

// GetExposedPorts mocks base method
func (m *MockdockerfileParser) GetExposedPorts() ([]uint16, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExposedPorts")
	ret0, _ := ret[0].([]uint16)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExposedPorts indicates an expected call of GetExposedPorts
func (mr *MockdockerfileParserMockRecorder) GetExposedPorts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExposedPorts", reflect.TypeOf((*MockdockerfileParser)(nil).GetExposedPorts))
}

// MockserviceArnGetter is a mock of serviceArnGetter interface
type MockserviceArnGetter struct {
	ctrl     *gomock.Controller
	recorder *MockserviceArnGetterMockRecorder
}

// MockserviceArnGetterMockRecorder is the mock recorder for MockserviceArnGetter
type MockserviceArnGetterMockRecorder struct {
	mock *MockserviceArnGetter
}

// NewMockserviceArnGetter creates a new mock instance
func NewMockserviceArnGetter(ctrl *gomock.Controller) *MockserviceArnGetter {
	mock := &MockserviceArnGetter{ctrl: ctrl}
	mock.recorder = &MockserviceArnGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockserviceArnGetter) EXPECT() *MockserviceArnGetterMockRecorder {
	return m.recorder
}

// GetServiceArn mocks base method
func (m *MockserviceArnGetter) GetServiceArn() (*ecs.ServiceArn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceArn")
	ret0, _ := ret[0].(*ecs.ServiceArn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceArn indicates an expected call of GetServiceArn
func (mr *MockserviceArnGetterMockRecorder) GetServiceArn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceArn", reflect.TypeOf((*MockserviceArnGetter)(nil).GetServiceArn))
}

// MockstatusDescriber is a mock of statusDescriber interface
type MockstatusDescriber struct {
	ctrl     *gomock.Controller
	recorder *MockstatusDescriberMockRecorder
}

// MockstatusDescriberMockRecorder is the mock recorder for MockstatusDescriber
type MockstatusDescriberMockRecorder struct {
	mock *MockstatusDescriber
}

// NewMockstatusDescriber creates a new mock instance
func NewMockstatusDescriber(ctrl *gomock.Controller) *MockstatusDescriber {
	mock := &MockstatusDescriber{ctrl: ctrl}
	mock.recorder = &MockstatusDescriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockstatusDescriber) EXPECT() *MockstatusDescriberMockRecorder {
	return m.recorder
}

// Describe mocks base method
func (m *MockstatusDescriber) Describe() (*describe.AppStatusDesc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Describe")
	ret0, _ := ret[0].(*describe.AppStatusDesc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Describe indicates an expected call of Describe
func (mr *MockstatusDescriberMockRecorder) Describe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Describe", reflect.TypeOf((*MockstatusDescriber)(nil).Describe))
}

// MockenvDescriber is a mock of envDescriber interface
type MockenvDescriber struct {
	ctrl     *gomock.Controller
	recorder *MockenvDescriberMockRecorder
}

// MockenvDescriberMockRecorder is the mock recorder for MockenvDescriber
type MockenvDescriberMockRecorder struct {
	mock *MockenvDescriber
}

// NewMockenvDescriber creates a new mock instance
func NewMockenvDescriber(ctrl *gomock.Controller) *MockenvDescriber {
	mock := &MockenvDescriber{ctrl: ctrl}
	mock.recorder = &MockenvDescriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockenvDescriber) EXPECT() *MockenvDescriberMockRecorder {
	return m.recorder
}

// Describe mocks base method
func (m *MockenvDescriber) Describe() (*describe.EnvDescription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Describe")
	ret0, _ := ret[0].(*describe.EnvDescription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Describe indicates an expected call of Describe
func (mr *MockenvDescriberMockRecorder) Describe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Describe", reflect.TypeOf((*MockenvDescriber)(nil).Describe))
}

// MockpipelineGetter is a mock of pipelineGetter interface
type MockpipelineGetter struct {
	ctrl     *gomock.Controller
	recorder *MockpipelineGetterMockRecorder
}

// MockpipelineGetterMockRecorder is the mock recorder for MockpipelineGetter
type MockpipelineGetterMockRecorder struct {
	mock *MockpipelineGetter
}

// NewMockpipelineGetter creates a new mock instance
func NewMockpipelineGetter(ctrl *gomock.Controller) *MockpipelineGetter {
	mock := &MockpipelineGetter{ctrl: ctrl}
	mock.recorder = &MockpipelineGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockpipelineGetter) EXPECT() *MockpipelineGetterMockRecorder {
	return m.recorder
}

// GetPipeline mocks base method
func (m *MockpipelineGetter) GetPipeline(pipelineName string) (*codepipeline.Pipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipeline", pipelineName)
	ret0, _ := ret[0].(*codepipeline.Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipeline indicates an expected call of GetPipeline
func (mr *MockpipelineGetterMockRecorder) GetPipeline(pipelineName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipeline", reflect.TypeOf((*MockpipelineGetter)(nil).GetPipeline), pipelineName)
}

// ListPipelinesForProject mocks base method
func (m *MockpipelineGetter) ListPipelinesForProject(projectName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPipelinesForProject", projectName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPipelinesForProject indicates an expected call of ListPipelinesForProject
func (mr *MockpipelineGetterMockRecorder) ListPipelinesForProject(projectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPipelinesForProject", reflect.TypeOf((*MockpipelineGetter)(nil).ListPipelinesForProject), projectName)
}

// Mockexecutor is a mock of executor interface
type Mockexecutor struct {
	ctrl     *gomock.Controller
	recorder *MockexecutorMockRecorder
}

// MockexecutorMockRecorder is the mock recorder for Mockexecutor
type MockexecutorMockRecorder struct {
	mock *Mockexecutor
}

// NewMockexecutor creates a new mock instance
func NewMockexecutor(ctrl *gomock.Controller) *Mockexecutor {
	mock := &Mockexecutor{ctrl: ctrl}
	mock.recorder = &MockexecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockexecutor) EXPECT() *MockexecutorMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *Mockexecutor) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute
func (mr *MockexecutorMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*Mockexecutor)(nil).Execute))
}

// MockdeletePipelineRunner is a mock of deletePipelineRunner interface
type MockdeletePipelineRunner struct {
	ctrl     *gomock.Controller
	recorder *MockdeletePipelineRunnerMockRecorder
}

// MockdeletePipelineRunnerMockRecorder is the mock recorder for MockdeletePipelineRunner
type MockdeletePipelineRunnerMockRecorder struct {
	mock *MockdeletePipelineRunner
}

// NewMockdeletePipelineRunner creates a new mock instance
func NewMockdeletePipelineRunner(ctrl *gomock.Controller) *MockdeletePipelineRunner {
	mock := &MockdeletePipelineRunner{ctrl: ctrl}
	mock.recorder = &MockdeletePipelineRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockdeletePipelineRunner) EXPECT() *MockdeletePipelineRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockdeletePipelineRunner) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockdeletePipelineRunnerMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockdeletePipelineRunner)(nil).Run))
}

// MockaskExecutor is a mock of askExecutor interface
type MockaskExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockaskExecutorMockRecorder
}

// MockaskExecutorMockRecorder is the mock recorder for MockaskExecutor
type MockaskExecutorMockRecorder struct {
	mock *MockaskExecutor
}

// NewMockaskExecutor creates a new mock instance
func NewMockaskExecutor(ctrl *gomock.Controller) *MockaskExecutor {
	mock := &MockaskExecutor{ctrl: ctrl}
	mock.recorder = &MockaskExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockaskExecutor) EXPECT() *MockaskExecutorMockRecorder {
	return m.recorder
}

// Ask mocks base method
func (m *MockaskExecutor) Ask() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ask")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ask indicates an expected call of Ask
func (mr *MockaskExecutorMockRecorder) Ask() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ask", reflect.TypeOf((*MockaskExecutor)(nil).Ask))
}

// Execute mocks base method
func (m *MockaskExecutor) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute
func (mr *MockaskExecutorMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockaskExecutor)(nil).Execute))
}
